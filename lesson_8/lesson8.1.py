# # в сете все элементы в одом экземпляре тоесть нет повторяющихся элементов,
# # можно было решить задачу 6.3
# my_set = set()
# print(my_set)
# my_set2 = {3, "rrr", 3}
# print(my_set2)
#
# # Если привести любое множество к сэту то получим множество из элементов в
# # одном экземпляре тооесть без повторений
#
# l1 = [i for i in range(6)]
# print(l1)
# print(set(l1))
#
# # при передаче множеству оесть сэту словаря то мы получив в результате ключи
# # от словаря
#
# # если мы передадим в сэт строку то строка разбивается на символы и
# # одинаковые симовлы остануться в одном экземпляре

for i in {1, 2, 3, 4}:  # для того что бы понять что это сэт то пишем его в
    # фигурных скобках
    print(i)

if 2 in {1, 2, 3, 4}:
    print("ok")

# Добаляем элемент во множество(сэт) методом add

v = {1, 2, 3, 4}
print(v)
v.add(12)
print(v)

# удаляем функцией x.discard() этот метод не выдает ошибку когда нет такого
# элемента который мы хотим удалить

v.discard(2)
print(v)

# Метод pop() удаляет последний элемент можества в полном списке или с
# заданием конкретного элемента, если мы попробуем удалить что то из пустого
# сэта то выдаст эррор
# так же есть метод remove() оч похож на дискард

# Обьединение двух множеств (сложение сэтов(set)) с = a | b и еще что то что
# я не записал

# Пересечение множества (умножение) a.intersection(b) c = a & b
# Разность множеств c = a ^ b задача 



